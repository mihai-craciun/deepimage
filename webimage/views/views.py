from django.shortcuts import render, redirect
from django.views.generic import View
from django.contrib.auth import authenticate, logout, login
from django.contrib.auth.models import User
from webimage.forms import *
from webimage.views.models import userview


# Create your views here.


class IndexView(View):
    def get(self, request):
        albums = userview.user_albums(request.user).count()
        albums_rank = userview.user_albums_rank(request.user)
        photos = userview.user_photos(request.user).count()
        photos_rank = userview.user_photos_rank(request.user)
        tags = userview.user_tags(request.user)
        tags_rank = userview.user_tags_rank(request.user)
        tags_list_limit = 5
        return render(request, 'webimage/index.html', {
            'title': 'Home',
            'albums': albums,
            'albums_rank': albums_rank,
            'photos': photos,
            'photos_rank': photos_rank,
            'tags': tags.count(),
            'tags_rank': tags_rank,
            'tags_list': tags[:tags_list_limit],
        })


class LoginView(View):
    def get(self, request):
        if request.user.is_authenticated:
            return redirect('/')
        return render(request, 'webimage/auth/login.html', {
            'title': 'Login',
            'form': LoginForm(),
        })

    def post(self, request):
        # If not guest redirect
        if request.user.is_authenticated:
            return redirect('/')

        # Getting the post data
        form = LoginForm(request.POST)

        if form.is_valid():
            data = form.cleaned_data

            # Trying to get the user and log in
            try:
                useremail = User.objects.get(email=data['email'])
                user = authenticate(
                    request, username=useremail.username, password=data['password'])
            except User.DoesNotExist:
                user = None

            # If authentication is a success
            if user is not None:
                login(request, user)

                # If remember is True then set expiry in a year. else until browser close
                if data['remember']:
                    request.session.set_expiry(365 * 24 * 60 * 60)
                else:
                    request.session.set_expiry(0)
                return redirect('/')

            # If auth is not a success return form with errors
            else:
                form.add_error(
                    'email', 'The email password combination is wrong.')
                return render(request, 'webimage/auth/login.html', {
                    'title': 'Login',
                    'form': form,
                })
        # If form is not valid then return with errors
        else:
            return render(request, 'webimage/auth/login.html', {
                'title': 'Login',
                'form': form,
            })


class RegisterView(View):
    def get(self, request):
        if request.user.is_authenticated:
            return redirect('/')
        return render(request, 'webimage/auth/register.html', {
            'title': 'Register',
            'form': RegisterForm(),
        })

    def post(self, request):
        # If not guest redirect
        if request.user.is_authenticated:
            return redirect('/')

        # Getting the post data
        form = RegisterForm(request.POST)

        if form.is_valid():
            data = form.cleaned_data

            # Backend validation
            if len(User.objects.filter(username=data['username'])) > 0:
                form.add_error('username', 'This username is already taken.')

            if len(User.objects.filter(email=data['email'])) > 0:
                form.add_error(
                    'email', 'There is already an user registered with this email.')

            if data['password'] != data['confirm_password']:
                form.add_error('confirm_password',
                               'The passwords do not match.')

            if form.is_valid():
                # No extra error generated by backend
                # Creating user
                user = User.objects.create_user(data['username'], data['email'], data['password'],
                                                first_name=data['first_name'], last_name=data['last_name'])
                login(request, user)
                return redirect('/')

        # If form is not valid then return with errors
        return render(request, 'webimage/auth/register.html', {
            'title': 'Login',
            'form': form,
        })


class LogoutView(View):
    def post(self, request):
        logout(request)
        return redirect('/')


class EditProfileView(View):
    def get(self, request):
        form=EditProfileForm(initial={
            'first_name': request.user.first_name,
            'last_name': request.user.last_name
            })
        return render(request, 'webimage/profile.html', {
            'title': 'Edit Profile',
            'form': form,
        })

    def post(self, request):
        # Getting the post data
        form = EditProfileForm(request.POST)
        changed = False

        if form.is_valid():
            data = form.cleaned_data

            # Change names
            if data['first_name'] != "":
                if data['first_name'] != request.user.first_name:
                    changed = True
                    request.user.first_name = data['first_name']
                    request.user.save()
            else:
                form.add_error('first_name', 'First name cannot be null')
            
            if data['last_name'] != "":
                if data['last_name'] != request.user.last_name:
                    changed = True
                    request.user.last_name = data['last_name']
                    request.user.save()
            else:
                form.add_error('last_name', 'Last name cannot be null')
            
            # Password
            if data['password'] != "":
                if data['password'] != data['confirm_password']:
                    form.add_error('confirm_password', 'Passwords do not match')
                else:
                    if request.user.check_password(data['password']):
                        form.add_error('password', 'The new password cannot be the old password')
                    else:
                        changed = True
                        request.user.set_password(data['password'])
                        request.user.save()
        
        return render(request, 'webimage/profile.html', {
            'title': 'Edit Profile',
            'form': form,
            'success': form.is_valid() and changed
        })
        
        