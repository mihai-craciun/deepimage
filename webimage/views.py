from django.shortcuts import render, redirect
from django.views.generic import View
from django.contrib.auth import authenticate, logout, login
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from .forms import *
# Create your views here.


class IndexView(View):
    def get(self, request):
        print(request.user.is_authenticated)
        return render(request, 'webimage/index.html', {
            'title': 'Home',
        })


class GalleryView(View):
    def get(self, request):
        return render(request, 'webimage/gallery.html', {
            'title': 'Gallery'
        })


class LoginView(View):
    def get(self, request):
        if request.user.is_authenticated:
            return redirect('/')
        return render(request, 'webimage/auth/login.html', {
            'title': 'Login',
            'form': LoginForm(),
        })

    def post(self, request):
        # If not guest redirect
        if request.user.is_authenticated:
            return redirect('/')

        # Getting the post data
        form = LoginForm(request.POST)

        if form.is_valid():
            data = form.cleaned_data

            # Trying to get the user and log in
            try:
                useremail = User.objects.get(email=data['email'])
                user = authenticate(
                    request, username=useremail.username, password=data['password'])
            except User.DoesNotExist:
                user = None

            # If authentication is a success
            if user is not None:
                login(request, user)

                #I f remember is True then set expiry in a year. else until browser close
                if data['remember']:
                    request.session.set_expiry(365 * 24 * 60 * 60)
                else:
                    request.session.set_expiry(0)
                return redirect('/')

            # If auth is not a success return form with errors
            else:
                form.add_error(
                    'email', 'The email password combination is wrong.')
                return render(request, 'webimage/auth/login.html', {
                    'title': 'Login',
                    'form': form,
                })
        # If form is not valid then return with errors
        else:
            return render(request, 'webimage/auth/login.html', {
                'title': 'Login',
                'form': form,
            })


class RegisterView(View):
    def get(self, request):
        if request.user.is_authenticated:
            return redirect('/')
        return render(request, 'webimage/auth/register.html', {
            'title': 'Register',
            'form': RegisterForm(),
        })

    def post(self, request):
        # If not guest redirect
        if request.user.is_authenticated:
            return redirect('/')

        # Getting the post data
        form = RegisterForm(request.POST)

        if form.is_valid():
            data = form.cleaned_data

            # Backend validation
            if len(User.objects.filter(username=data['username'])) > 0:
                form.add_error('username', 'This username is already taken.')

            if len(User.objects.filter(email=data['email'])) > 0:
                form.add_error(
                    'email', 'There is already an user registered with this email.')

            if data['password'] != data['confirm_password']:
                form.add_error('confirm_password',
                               'The passwords do not match.')

            if form.is_valid():
                # No extra error generated by backend
                # Creating user
                user = User.objects.create_user(data['username'], data['email'], data['password'],
                                                first_name=data['first_name'], last_name=data['last_name'])
                login(request, user)
                return redirect('/')

        # If form is not valid then return with errors
        return render(request, 'webimage/auth/register.html', {
            'title': 'Login',
            'form': form,
        })


class LogoutView(View):
    def post(self, request):
        logout(request)
        return redirect('/')
